@using Nemesys.Models.ViewModels
@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> UserManager
@model Nemesys.Models.ViewModels.ReportPostViewModel


@{
    ViewData["Title"] = Model.Title;
    var currentUser = await UserManager.GetUserAsync(User);
}

@section Scripts{
    <script>
        // Your map initialization code here
        function initMap() {
            const coords = '@Model.Location';

            if (coords && coords.includes(',')) {
                const [lat, lng] = coords.split(',').map(Number);
                const postMap = L.map('post-map').setView([lat, lng], 13);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(postMap);
                L.marker([lat, lng]).addTo(postMap)
                    .bindPopup("Selected Location").openPopup();
            } else {
                document.getElementById('post-map').style.display = 'none';
                document.querySelector('.small').textContent = 'No location data available';
            }
        }

        // Call the function when the DOM is loaded
        document.addEventListener('DOMContentLoaded', initMap);
    </script>
}

<a asp-controller="ReportPosts" asp-action="Index" class="btn btn-outline-secondary">Back to list</a>

<h1>@Model.Title</h1>

<div class="card" style="width: 90%; padding:20px; margin:20px;">

    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
        <img class="card-img-top" src="@Model.ImageUrl" alt="Image for @Model.Title" />
    }
    <div class="card-body">
        <h3 class="card-title">@Model.Title</h3>
        <p class="card-text">@Model.Content</p>
        <p class="small">Hazard Type: @Model.HazardType.Name</p>
        <p class="small">Status: @Model.ReportStatus.Name</p>
        <p class="small">Reported on: @Model.CreatedDate.ToShortDateString()</p>
        <p class="small">Reported by: @Model.Author.Name</p>
        <div style="margin-bottom: 20px;">
            <div id="post-map" style="height: 400px; margin-bottom: 10px;"></div>
        </div>
    </div>
</div>

<a asp-controller="ReportPosts" asp-action="Index" class="btn btn-primary">Back to list</a>

@if (User.Identity.IsAuthenticated)
{
    if (Model.LoggedInUserId == Model.Author.Id && currentUser?.Role == "Reporter" || currentUser?.Role == "Investigator")
    {
        <form asp-controller="ReportPosts" asp-action="Delete" asp-route-id="@Model.Id" method="post" style="display:inline;">
            <button type="submit" class="btn btn-danger" onclick="return confirm('You sure you wanna delete this report?');">Delete</button>
        </form>
    }
}



@if (User.Identity.IsAuthenticated)
{
    if (Model.LoggedInUserId == Model.Author.Id && currentUser?.Role == "Reporter" || currentUser?.Role == "Investigator")
    {
        <a asp-controller="ReportPosts" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">Edit</a>
    }
}

@if (User.Identity.IsAuthenticated)
{
    
    <form asp-controller="ReportPosts" asp-action="ToggleUpvote" asp-route-reportPostId="@Model.Id" method="post">
        <br>
        <input type="hidden" name="returnUrl" value="@Url.Action("Details", new { id = Model.Id })" />
        <button type="submit" class="btn @(Model.HasUpvoted ? "btn-success" : "btn-outline-secondary")">
            👍 @Model.UpvoteCount
        </button>
    </form>

}
